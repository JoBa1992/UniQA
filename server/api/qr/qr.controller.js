/**
 * Using Rails-like standard naming convention for endpoints.
 * GET     /qrs              ->  index
 * POST    /qrs              ->  create
 * GET     /qrs/:id          ->  show
 * PUT     /qrs/:id          ->  update
 * DELETE  /qrs/:id          ->  destroy
 */

'use strict';

var _ = require('lodash');
var Qr = require('./qr.model');

// USED FOR QR GENERATION
var fs = require('fs');
var path = require('path');
var qrEncoder = require('qr-image');

function file(name) {
  return fs.createWriteStream(path.join(__dirname, '../../storage/qrs/', name));
}


// var path = require('path');

// library for QR generation
// var Encoder = require('qr').Encoder;
// var qrEncoder = new Encoder;

// Get list of qrs (or limit by querystring)
exports.index = function(req, res) {
  Qr.find(req.query, function(err, qr) {
    if (err) {
      return handleError(res, err);
    }
    // if limited by querystring, return single object
    if (req.query)
      qr = qr[0];
    return res.status(200).json(qr);
  });
};

// Get a single qr
exports.show = function(req, res) {
  Qr.findById(req.params.id, function(err, qr) {
    if (err) {
      return handleError(res, err);
    }
    if (!qr) {
      return res.status(404).send('Not Found');
    }
    return res.json(qr);
  });
};

// Creates a new qr in the DB.
exports.create = function(req, res) {
  //console.log(req.body);
  // need to pass
  // * lecture ID, generated by lecture creation
  // * tutor ID, sent automatically by logged in user
  // * server name/url ( e.g: http://uniqa.shu.ac.uk/api/qr/ ), served from Thing

  Qr.create({
    lecture: req.body.lectureID,
    createdBy: req.body.userID
  }, function(err, qr) {
    if (err) {
      return handleError(res, err);
    }
    var url = String(req.body.baseURL + '/lecture/' + qr._id + '/register');
    var qrFileName = qr._id + '.png';
    var qrFileLoc = file(qrFileName);
    qrEncoder.image(url, {
      type: 'png',
      ec_level: 'Q',
      parse_url: false,
      margin: 1,
      size: 20
    }).pipe(qrFileLoc);
    //fs.writeFileSync('qr_sync.png', qrEncoder.imageSync(text));
    Qr.findById(qr._id).exec(function(err, uQr) {
      if (err) {
        return handleError(res, err);
      }
      if (!uQr) {
        return res.status(404).send('Not Found');
      }
      //var updated = _.merge(uQr, req.body);
      uQr.url = url;
      uQr.save(function(err) {
        if (err) {
          return handleError(res, err);
        }
        return res.status(200).json(uQr);
      });
    });
  });
};

// Updates an existing qr in the DB.
exports.update = function(req, res) {
  if (req.body._id) {
    delete req.body._id;
  }
  Qr.findById(req.params.id, function(err, qr) {
    if (err) {
      return handleError(res, err);
    }
    if (!qr) {
      return res.status(404).send('Not Found');
    }
    var updated = _.merge(qr, req.body);
    updated.save(function(err) {
      if (err) {
        return handleError(res, err);
      }
      return res.status(200).json(qr);
    });
  });
};

// Deletes a qr from the DB.
exports.destroy = function(req, res) {
  Qr.findById(req.params.id, function(err, qr) {
    if (err) {
      return handleError(res, err);
    }
    if (!qr) {
      return res.status(404).send('Not Found');
    }
    qr.remove(function(err) {
      if (err) {
        return handleError(res, err);
      }
      return res.status(204).send('No Content');
    });
  });
};

function handleError(res, err) {
  return res.status(500).send(err);
}